plugins {
    id 'nf-amazon'
    id 'nf-validation'
}

// Default parameters
params {

    // I/O
    input    = null
    outdir   = 'test_output'
    
    // PROCESS SPECIFIC
    skip_preprocessing      = false
    skip_fastqc             = false
    skip_multiqc            = false
    
    // MAX RESOURCES - FOR TESTING ONLY. OVERWRITE!
    max_cpus     = 2
    max_memory   = '7.GB'
    max_time     = '2.h'
    
    // TRACE AND PUBLISH
    publish_dir_mode        = 'copy'
    tracedir                = "${params.outdir}/pipeline_info"

}


// Add configs config
includeConfig 'conf/base.config'
includeConfig 'conf/docker.config'
includeConfig 'conf/modules.config'

// Pipeline info
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf/template'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
